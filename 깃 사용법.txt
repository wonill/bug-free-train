# Git
 
  - .git 폴더가 위치한 폴더 안의 모든 내용을 관리해주는 프로그램
  - .git 폴더를 추가한 곳을 Repository라고 부른다
  - .git 폴더 내부에는 Repository의 모든 정보를 기록한다 (변경 내역, 복원 지점 등)
  - .git 내부의 정보를 활용하여 해당 Repository를 예전 모습으로 되돌릴 수 있다
  - Git은 레포지토리 내부의 미세한 변화도 모두 알아채고 관리해준다
  - Eclipse에 내장된 Egit이라는 프로그램을 사용할 수 있다
  
# 새 프로젝트 생성하기

 - 레포지토리를 모아놓을 폴더 내부에 새 프로젝트 생성하기
 
# 생성한 새 프로젝트를 레포지토리로 만들기 (프로젝트에 .git 추가)
   
 - window -> Show View -> others -> Git -> Git Repository
 - Create a new local Git repository
 - 만들어놓은 새 프로젝트 선택 후 생성
 
 
# Commit
  
 - 레포지토리 내부의 변경 사항을 확정짓는 명령어
 - 커밋한 시점은 복원 지점이 된다
 - 체크아웃 명령을 통해 언제든지 원하는 지점으로 현재 상태를 변경할 수 있다
   
# staged와 unstaged 상태

 - 가장 최근 커밋 이후의 모든 변화를 unstaged 상태라고 한다
 - unstaged들 중에서 이번 커밋에 포함시키고 싶은 변화들만 선택하여
   staged 상태로 변환 후 커밋을 진행할 수 있다
 - 커밋 당시 unstaged 상태로 남겨놓는 변경 사항들은 아직 더 만들어야 하는
   코드들이라고 볼 수 있다
 - staged 상태로 커밋에 포함시키는 것은 다 만들어져서
   해당 상태를 보관하고자 하는 코드들이다
   
   
           # 레포지토리에 프로젝트 연결하기
 
         - 레포지토리 우클릭 -> Import Projects	
         
         
# History
 
 - 레포지토리 우클릭 -> Show In -> History
 - 파일을 클릭하면 해당 파일만의 History를 볼 수 있다
 - History에서 원하는 커밋을 찾아 언제든지 과거 상태로 되돌아갈 수 있다
 - 과거 상태에서 새로운 커밋을 만들면 이후의 커밋들을 잃어버릴 수 있으므로 주의해야 한다 
 
# Branch

 - 하나의 레포지토리를 다양한 형태로 보관할 수 있는 기능
 - 브랜치가 있어야 하나의 커밋으로부터 여러 갈래의 커밋으로 갈라질 수 있다
 - 다른 커밋 상태로 변경하는 것도 체크 아웃이지만 특정 브랜치에서 다른 브랜치로
   변경하는 것도 체크 아웃이라고 한다
 - 변경 사항을 커밋하지 않은 상태로 다른 브랜치로 체크아웃할 시 작업 내용이 모두
   사라질 수 있으므로 주의해야 한다
   
# Merge

 - 한 브랜치에 다른 브랜치의 내용을 합치면서 새로운 커밋을 생성하는 것
 - 두 브랜치의 내용을 합치는 도중 같은 부분을 다른 내용으로 수정했다면
   충돌이 발생한다.
 - 충돌은 기본적으로 피해야 하지만 어쩔 수 없이 충돌이 발생한 경우
   두 브랜치의 충돌 내용 중 한쪽의 내용을 선택하는 충돌 해결 과정을 
   거쳐야 한다
 - 충돌이 없는 경우 쉽게 합쳐지기 때문에 같은 파일의 같은 부분을 건드리지 
   않는다면 큰 문제는 발생하지 않는다
   